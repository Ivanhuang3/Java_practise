package ivan666;

public class ivan27 {
	public static void main(String[] args) {
//		ivan271 obj1 = new ivan271();
//		ivan271 obj2 = new ivan271();
		ivan271.m2();
		ivan271.m2();
		ivan271.m2();
	}
}
class ivan{
	{
		System.out.println("{}");
	}
//類別Brad271
//實例初始化區塊（{}）
//		這就像每次要做一塊新披薩時，先準備麵團和醬料，
//		印出 "{}"。
//		但只有 創建物件 （new Brad271()）時才會執行，
//		這次沒做披薩，所以不會跑這段。
	static {
		System.out.println("static:{}");
	}
//靜態初始化區塊（static {}）
//這是披薩店第一次開張時的準備（買烤箱、裝潢），
//印出 "static:{}"。
//只在類別 第一次被載入（loaded）時執行一次 ，
//不管有沒有創建物件。只要程式用到 Brad271
//（比如呼叫 m2()），這段就會跑。
//靜態初始化區塊：店開張時的準備，只做一次。
//靜態方法：像廣播，隨時可以喊，不用做披薩。
	ivan271(){
		System.out.println("Ivan271()");
	}
//建構子
//這是正式完成一塊披薩的步驟（烤好披薩），
//印出 "ivan271()"。
//只有 創建物件 （new ivan271()）時才會執行，
//這次沒做披薩，所以不會跑。
//實例初始化區塊：每塊披薩的準備步驟（每次 new 時跑）。
//建構子：每塊披薩的完成步驟（每次 new 時跑）。
//實例方法：只有某塊披薩能做的動作（需要物件）。
	void m1() {
		System.out.println("Ivan271:m1()");
	}
//這是幫某塊披薩加料（比如撒奶酪），需要有一塊披薩（物件）
//才能做。
//這次沒用到，所以不會跑。
	static void m2() {
		System.out.println("static:m2()");
	}	
}
//這是店裡的廣播系統，直接喊話宣傳，印出 "static:m2()"。
//因為是靜態的，不需要做披薩，隨時可以喊。
//main 方法呼叫了兩次 m2()，所以會喊兩次。

//跟前面的 Brad28 有什麼不同？
//Brad28（之前的程式）：
//展示多型和繼承，用父類（Brad281）和子類（Brad282、Brad283）
//玩物件轉型和方法覆寫。
//像一個樂團家族，每個人有不同技能，程式讓他們上台表演。
//Brad27（這段程式）：
//展示靜態 vs 實例的行為，還有類別初始化流程。
//像一家披薩店，專注在開店準備和廣播宣傳，沒做披薩（沒創建物件）。
//簡單說，Brad28 是玩物件的靈活轉換，Brad27 是看工廠（類別）
//怎麼啟動和執行簡單任務。